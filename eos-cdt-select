#!/bin/bash
#
# Copyright (c) 2019 EOS Sw/eden
#
# Simple script to view the currect version and to
# switch between versions (updating an symlink)

BASE_DIR=/usr/opt
VERSION_DIR=${BASE_DIR}/eosio.cdt
CURRENT=${VERSION_DIR}/current
CURRENT_VERSION=$(basename $(readlink -f "${CURRENT}"))
BASH_SOURCE_ARGS=$@

# Gain root access.
# exists with an error if we can't.
require_root() {
    # Already root. exit.
    [ $EUID -eq 0 ] && return

    # Try executing sudo.
    SUDO=$(command -v sudo)
    [[ -x "${SUDO}" ]] && { ${SUDO} -u root "${BASH_SOURCE}" ${BASH_SOURCE_ARGS}; exit $?; }

    # sudo was not available. Give up.
    echo -e "[\e[31mError\e[0m] Root is required to execute this command."
}

function list_versions() {
	find "${VERSION_DIR}" -type f -wholename "*/LINK" | sort | sed -r 's/.*\/([^/]+)\/LINK$/\1/'
}

# param <index>
function name_to_index() {

    local cmp=$(($1+0))
    local i=1
    for v in $(list_versions) ; do
       if [ $i -eq $cmp ]; then
          echo -n $v
          break
       fi
       ((i++))
    done
}

# param <version>
function set_version() {

    VERSION=$(name_to_index ${1})
    LINK=${VERSION_DIR}/${VERSION}/LINK

    require_root

    if [ -z "${VERSION}" ]; then
        echo -e "[\e[31mError\e[0m] Index out of range: ${1}"
        exit 1
    fi

    if [ ! -f "${LINK}" ]; then
        echo -e "[\e[31mError\e[0m] Could not switch to version '${VERSION}': Linkfile '${LINK}' is missing."
        exit 1
    fi

    # Check if we have a current version.
    if [ -f "${CURRENT}/LINK" ]; then

        # Unlink previous links.
    	for ent in $(cat "${CURRENT}/LINK"); do
            [[ -L "${BASE_DIR}/${ent}" ]] && rm -f "${BASE_DIR}/${ent}" && echo -e " \e[1m\e[34m*\e[0m ${ent}"
    	done
    fi

    # Link new ones.
    for ent in $(cat "${VERSION_DIR}/${VERSION}/LINK"); do
	    mkdir -p $(dirname "${BASE_DIR}/${ent}")
	    ln -sn "${VERSION_DIR}/${VERSION}/${ent}" "${BASE_DIR}/${ent}"
	    echo -e " \e[1m\e[32m*\e[0m ${ent}"
    done

    # Update "current" symlink
    ln -sfn "${VERSION_DIR}/${VERSION}" "${CURRENT}"

    if [ $? -ne 0 ]; then
        echo -e "[\e[31mError\e[0m] Could not create/update symlink."
        exit
    fi

    # Done
    echo -e "[\e[32m-\e[0m] Version switched to: \e[33m${VERSION}\e[0m"
}

function list() {

    echo -e "\e[1m\e[32mListing available symlink targets:\e[0m"

    local i=1
    for ver in $(list_versions) ; do

        echo -ne "  \e[1m[$i]\e[0m   $ver"
        if [ "${CURRENT_VERSION}" == "${ver}" ]; then
            echo -ne " \e[1m\e[34m*\e[0m"
        fi
        echo -ne "\n"

        ((i++))
    done
}

function show() {
    LINK=$(readlink -e ${CURRENT})
    if [ -z "${LINK}" ]; then
       echo -e "Symlink \e[1m${CURRENT}\e[0m does not exist."
    else :
       echo -e "\e[1m\e[32mCurrent symlink points to:\e[0m"
       echo "  ${LINK}"
    fi
}

function usage() {
    echo "Usage: ${0} [ list | set | show | help ]"
}

function help() {
    echo -e "Manage the \e[1m${TARGET}\e[0m symlink"
    usage
    echo -e "\n\e[1m\e[32mCommands:\e[0m"
    echo -e "  \e[1m\e[34mlist\e[0m\t\t\tList available eoscdt targets (directories in \e[1m${SOURCE_BASE}\e[0m)"
    echo -e "  \e[1m\e[34mset\e[0m <index>\t\tSet a new eoscdt symlink target"
    echo -e "    index\t\t  Target number (from \e[1m\e[34mlist\e[0m action)"
    echo -e "  \e[1m\e[34mshow\e[0m\t\t\tShow what the current symlink (\e[1m${TARGET}\e[0m) points to."
    echo -e "  \e[1m\e[34mhelp\e[0m\t\t\tDisplay help text (this text)"
    exit 1
}

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

case "${1}" in
    "list") list ;;
    "set")
        if [ $# -lt 2 ]; then
            echo "usage: ${0} set <index>"
            exit
        fi
        set_version "${2}"
    ;;
    "show") show ;;
    "help") help ;;
    *)  echo -e "[\e[31mError\e[0m] Unrecognized command: '${1}'"
        usage
        exit 1
    ;;
esac
